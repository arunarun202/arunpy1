import sqlite3
import datetime

class Product:
    def __init__(self, product_id=None, name="", price=0.0, quantity=0, 
                 reorder_point=0, reorder_quantity=0, category=""):
        self.product_id = product_id
        self.name = name
        self.price = price
        self.quantity = quantity
        self.reorder_point = reorder_point
        self.reorder_quantity = reorder_quantity
        self.category = category

    def update_quantity(self, quantity_change):
        self.quantity += quantity_change

    def needs_reordering(self):
        return self.quantity <= self.reorder_point

    def reorder(self):
        self.quantity += self.reorder_quantity

    def to_dict(self):
        return {
            "product_id": self.product_id,
            "name": self.name,
            "price": self.price,
            "quantity": self.quantity,
            "reorder_point": self.reorder_point,
            "reorder_quantity": self.reorder_quantity,
            "category": self.category
        }


class Inventory:
    def __init__(self, db_path="inventory.db"):
        self.conn = sqlite3.connect(db_path)
        self.cursor = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS products (
                product_id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                price REAL,
                quantity INTEGER,
                reorder_point INTEGER,
                reorder_quantity INTEGER,
                category TEXT
            )
        """)
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS transactions (
                transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_id INTEGER,
                quantity INTEGER,
                transaction_type TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        self.conn.commit()

    def add_product(self, product):
        query = "INSERT INTO products (name, price, quantity, reorder_point, reorder_quantity, category) VALUES (?, ?, ?, ?, ?, ?)"
        self.cursor.execute(query, (product.name, product.price, product.quantity, product.reorder_point, product.reorder_quantity, product.category))
        self.conn.commit()
        return self.cursor.lastrowid

    def get_product(self, product_id):
        query = "SELECT * FROM products WHERE product_id = ?"
        self.cursor.execute(query, (product_id,))
        result = self.cursor.fetchone()
        if result:
            return Product(product_id, *result[1:])
        else:
            return None

    def get_all_products(self):
        query = "SELECT * FROM products"
        self.cursor.execute(query)
        return [Product(product_id, *row[1:]) for product_id, *row in self.cursor.fetchall()]

    def generate_reorder_list(self):
        reorder_list = []
        for product in self.get_all_products():
            if product.needs_reordering():
                reorder_list.append(product)
        return reorder_list

    def calculate_total_stock_value(self):
        total_value = 0
        for product in self.get_all_products():
            total_value += product.price * product.quantity
        return total_value

    def update_product_quantity(self, product_id, quantity_change, transaction_type):
        product = self.get_product(product_id)
        if product:
            product.update_quantity(quantity_change)
            query = "UPDATE products SET quantity = ? WHERE product_id = ?"
            self.cursor.execute(query, (product.quantity, product_id))
            self.conn.commit()
            # Log transaction
            self.record_transaction(product_id, quantity_change, transaction_type)
            return True
        else:
            return False

    def record_transaction(self, product_id, quantity, transaction_type):
        query = "INSERT INTO transactions (product_id, quantity, transaction_type) VALUES (?, ?, ?)"
        self.cursor.execute(query, (product_id, quantity, transaction_type))
        self.conn.commit()

    def get_transaction_history(self, product_id=None):
        if product_id:
            query = "SELECT * FROM transactions WHERE product_id = ?"
            self.cursor.execute(query, (product_id,))
        else:
            query = "SELECT * FROM transactions"
            self.cursor.execute(query)
        return self.cursor.fetchall()

    def close(self):
        self.conn.close()

# Example Usage
inventory = Inventory()

# Adding Products
product1 = Product(name="Laptop", price=1000, quantity=5, reorder_point=2, reorder_quantity=5, category="Electronics")
product2 = Product(name="Keyboard", price=50, quantity=10, reorder_point=5, reorder_quantity=10, category="Electronics")
product3 = Product(name="Mouse", price=25, quantity=20, reorder_point=10, reorder_quantity=15, category="Electronics")

product1_id = inventory.add_product(product1)
product2_id = inventory.add_product(product2)
product3_id = inventory.add_product(product3)

# Selling Items
inventory.update_product_quantity(product1_id, -2, "Sale")
inventory.update_product_quantity(product2_id, -3, "Sale")

# Reordering
reorder_list = inventory.generate_reorder_list()
for product in reorder_list:
    print(f"Reorder: {product.name} (Quantity: {product.quantity}, Reorder Quantity: {product.reorder_quantity})")

# Checking Stock Value
total_value = inventory.calculate_total_stock_value()
print(f"Total Stock Value: ${total_value}")

# Viewing Transaction History
history = inventory.get_transaction_history(product1_id)
print("\nTransaction History for Product 1:")
for row in history:
    transaction_id, product_id, quantity, transaction_type, timestamp = row
    print(f" - {transaction_type}: {quantity} units on {timestamp}")

# Closing the Database Connection
inventory.close()
